#version 450
#define RADIUS 1
#define GROUP_SIZE 16
#define TILE_DIM (2 * RADIUS + GROUP_SIZE)

layout(set = 0, binding = 0, rgba8) uniform image2D Output;
layout(set = 0, binding = 1) uniform sampler2D History;
layout(set = 0, binding = 2) uniform sampler2D ColorBuffer;
layout(set = 0, binding = 3) uniform sampler2D VelocityBuffer;
layout(set = 0, binding = 4) uniform sampler2D DepthBuffer;

layout(push_constant) uniform Constant{
    vec2 frameSize;
    vec2 jitter;
} constant;

layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;

shared vec3 Tile[TILE_DIM * TILE_DIM];

vec2 GetClosestVelocity(vec2 uv, vec2 texelSize)
{
    vec2 velocity;
    float closestDepth = 0.0;
    for(int y = -1; y <= 1; ++y){
        for(int x = -1; x <= 1; ++x){
            vec2 st = uv + vec2(x, y) * texelSize;
            float depth = texture(DepthBuffer, st).x;
            if(depth > closestDepth){
                velocity = texture(VelocityBuffer, st).xy;
                closestDepth = depth;
            }
        }
    }
    return velocity;
}

// vec3 SampleHistoryCatmullRom(vec2 uv, vec2 texelSize)
// {
//     vec2 samplePos = uv / texelSize;
//     vec2 texPos1 = floor(samplePos - 0.5) + 0.5;

//     vec2 f = samplePos - texPos1;

//     vec2 w0 = f * (-0.5 + f * (1.0 - 0.5 * f));
//     vec2 w1 = 1.0 + f * f * (-2.5 + 1.5 * f);
//     vec2 w2 = f * (0.5 + f * (2.0 - 1.5 * f));
//     vec2 w3 = f * f * (-0.5 + 0.5 * f);

//     vec2 w12 = w1 + w2;
//     vec2 offset12 = w2 / (w1 + w2);

//     vec2 texPos0 = texPos1 - 1.0;
//     vec2 texPos3 = texPos1 + 2.0;
//     vec2 texPos12 = texPos1 + offset12;

//     texPos0 *= texelSize;
//     texPos3 *= texelSize;
//     texPos12 *= texelSize;

//     vec3 result = vec3(0.0);

//     result += texelFetch(History, ivec2(texPos0), 0).xyz * w0.x * w0.y;
//     result += texelFetch(History, ivec2(texPos12), 0).xyz * w12.x * w0.y;
//     result += texelFetch(History, ivec2(texPos3), 0).xyz * w3.x * w0.y;

//     result += texelFetch(History, ivec2(texPos0), 0).xyz * w0.x * w12.y;
//     result += texelFetch(History, ivec2(texPos12), 0).xyz * w12.x * w12.y;
//     result += texelFetch(History, ivec2(texPos3), 0).xyz * w3.x * w12.y;

//     result += texelFetch(History, ivec2(texPos0), 0).xyz * w0.x * w3.y;
//     result += texelFetch(History, ivec2(texPos12), 0).xyz * w12.x * w3.y;
//     result += texelFetch(History, ivec2(texPos3), 0).xyz * w3.x * w3.y;

//     return max(result, 0.0);
// }

vec3 Reinhard(vec3 hdr)
{
    return hdr / (hdr + 1.0);
}

vec3 Tap(vec2 pos)
{
    return Tile[int(pos.x) + TILE_DIM * int(pos.y)];
}

void main() 
{
    vec2 texelSize = 1.0 / constant.frameSize;
    vec2 uv = (gl_GlobalInvocationID.xy) * texelSize;
    vec2 tilePos = gl_LocalInvocationID.xy + RADIUS + 0.5;

    // if (gl_LocalInvocationIndex < TILE_DIM * TILE_DIM / 4)
    // {
    //     ivec2 anchor = ivec2(gl_WorkGroupID.xy * GROUP_SIZE - RADIUS);

    //     ivec2 coord1 = anchor + ivec2(gl_LocalInvocationIndex % TILE_DIM, gl_LocalInvocationIndex / TILE_DIM);
    //     ivec2 coord2 = anchor + ivec2((gl_LocalInvocationIndex + TILE_DIM * TILE_DIM / 4) % TILE_DIM, (gl_LocalInvocationIndex + TILE_DIM * TILE_DIM / 4) / TILE_DIM);
    //     ivec2 coord3 = anchor + ivec2((gl_LocalInvocationIndex + TILE_DIM * TILE_DIM / 2) % TILE_DIM, (gl_LocalInvocationIndex + TILE_DIM * TILE_DIM / 2) / TILE_DIM);
    //     ivec2 coord4 = anchor + ivec2((gl_LocalInvocationIndex + TILE_DIM * TILE_DIM * 3 / 4) % TILE_DIM, (gl_LocalInvocationIndex + TILE_DIM * TILE_DIM * 3 / 4) / TILE_DIM);

    //     vec3 color0 = texelFetch(ColorBuffer, coord1, 0).xyz;
    //     vec3 color1 = texelFetch(ColorBuffer, coord2, 0).xyz;
    //     vec3 color2 = texelFetch(ColorBuffer, coord3, 0).xyz;
    //     vec3 color3 = texelFetch(ColorBuffer, coord4, 0).xyz;

    //     Tile[gl_LocalInvocationIndex] = Reinhard(color0);
    //     Tile[gl_LocalInvocationIndex + TILE_DIM * TILE_DIM / 4] = Reinhard(color1);
    //     Tile[gl_LocalInvocationIndex + TILE_DIM * TILE_DIM / 2] = Reinhard(color2);
    //     Tile[gl_LocalInvocationIndex + TILE_DIM * TILE_DIM * 3 / 4] = Reinhard(color3);
    // }

    // barrier();

    // if (any(greaterThanEqual(gl_GlobalInvocationID.xy, ivec2(constant.frameSize)))) {
    //     return; // out of bounds
    // }

    // float wsum = 0.0;
    // vec3 vsum = vec3(0.0, 0.0, 0.0);
    // vec3 vsum2 = vec3(0.0, 0.0, 0.0);

    // for (float y = -RADIUS; y <= RADIUS; ++y)
    // {
    //     for (float x = -RADIUS; x <= RADIUS; ++x)
    //     {
    //         vec3 neigh = Tap(tilePos + vec2(x, y));
    //         float w = exp(-3.0 * (x * x + y * y) / ((RADIUS + 1.0) * (RADIUS + 1.0)));
    //         vsum2 += neigh * neigh * w;
    //         vsum += neigh * w;
    //         wsum += w;
    //     }
    // }
        
    // vec3 ex = vsum / wsum;
    // vec3 ex2 = vsum2 / wsum;
    // vec3 dev = sqrt(max(ex2 - ex * ex, 0.0));

    // vec2 velocity = GetClosestVelocity(uv, texelSize);
    // float boxSize = mix(0.5, 2.5, smoothstep(0.02, 0.0, length(velocity)));

    // // Reproject and clamp to bounding box
    // vec3 nmin = ex - dev * boxSize;
    // vec3 nmax = ex + dev * boxSize;

    // vec3 history = SampleHistoryCatmullRom(uv + velocity, texelSize);
    // vec3 clampedHistory = clamp(history, nmin, nmax);
    // vec3 center = Tap(tilePos); // retrieve center value
    // vec3 result = mix(clampedHistory, center, 1.0 / 16.0);
    vec2 velocity = texture(VelocityBuffer, vec2(uv.x, 1.0 - uv.y)).xy;
    vec3 history = texture(History, uv + velocity).xyz;
    vec3 current = texture(ColorBuffer, uv + constant.jitter).xyz;
    vec3 result = mix(current, history, 0.95);
    imageStore(Output, ivec2(gl_GlobalInvocationID.xy), vec4(result, 1.0));
}
